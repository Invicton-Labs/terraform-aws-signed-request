output "request_host" {
  description = "The host that was used to create and sign the request URL. If the `host` input parameter was provided, this will have the same value. Otherwise, it will be the default endpoint for the given `service` in the given `region`."
  value       = local.result.host
}

output "request_url" {
  description = "The complete request URL to use for the request."
  value       = local.result.url
}

output "request_headers" {
  description = "The full set of headers to use in the request. This is the union between the `headers` input parameter and the `generated_headers` output parameter."
  value       = local.result.headers
}

output "generated_request_headers" {
  description = "The headers that were generated by the signing process (i.e. were not provided in the `headers` input parameter)."
  value       = local.result.generated_headers
}

output "aws_request_id" {
  description = "The AWS Request ID of the request. Only returned if the `make_request` input parameter was set to `true`."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.aws_request_id : null
}

output "response_status_code" {
  description = "The status code of the response. Only returned if the `make_request` input parameter was set to `true`."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.status_code : null
}

output "response_status_reason" {
  description = "The status message of the response. Only returned if the `make_request` input parameter was set to `true`."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.status_reason : null
}

output "response_headers" {
  description = "The headers included in the response. Only returned if the `make_request` input parameter was set to `true`."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.headers : null
}

output "response_body_raw" {
  description = "The raw response body. Only returned if the `make_request` input parameter was set to `true` AND the response body consists entirely of valid UTF-8 characters."
  value       = module.assert_successful_response.checked ? local.response_body_raw : null
}

output "response_body_base64" {
  description = "The base64-encoded response body. Only returned if the `make_request` input parameter was set to `true`. Note that if the raw response body was itself base64-encoded, this value will be double-encoded."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.body_base64 : null
}

output "response_body_object" {
  description = "The decoded object that was represented by the response body. Only returned if the `make_request` input parameter was set to `true` AND the response's `Content-Type` header is `text/xml` or `application/json`. For XML response bodies, attributes names are prefixed with a `@`, namespaces names are provided in a field named `$namespace`, and inner text content is provided in a field named `$content` (if an element has no inner text content, `$content` will be `null`)."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.body_object : null
}

output "response_mediatype" {
  description = "The mediatype of the response body, as provided in the response's `Content-Type` header. Only returned if the `make_request` input parameter was set to `true` AND the response's `Content-Type` header has a valid format."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.mediatype : null
}

output "response_mediatype_parameters" {
  description = "Key-value pairs of parameters for the response body mediatype, as provided in the response's `Content-Type` header. Only returned if the `make_request` input parameter was set to `true` AND the response's `Content-Type` header has a valid format. e.g. a `Content-Type` header with the value of `text/xml; charset=utf-8` would result in a value for this output value of `charset` => `utf-8`."
  value       = var.make_request && module.assert_successful_response.checked ? local.result.response.mediatype_parameters : null
}
